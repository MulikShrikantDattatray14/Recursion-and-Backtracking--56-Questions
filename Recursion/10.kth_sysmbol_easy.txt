Problem Description :

On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.

Given row number A and index B, return the Bth indexed symbol in row A. (The values of B are 0-indexed.).

======================================================================================================================================================================================

Example Input
Input 1:

 A = 3
 B = 0
Input 2:

 A = 4
 B = 4


Example Output
Output 1:

 0
Output 2:

 1


Example Explanation
Explanation 1:

 Row 1: 0
 Row 2: 01
 Row 3: 0110
Explanation 2:

 Row 1: 0
 Row 2: 01
 Row 3: 0110
 Row 4: 01101001

 ====================================================================================================================================================================================
solution approach :-

We will try to generate each of the rows through recursion.
The first row will have a single integer 0.
The subsequent rows can be found by replacing 0 with 0 and 1 and 
replacing 1 with 1 and 0.

Time Complexity : O(2A)
Space Complexity : O(2A)

=============================================================================================================

 for small constraints : 
 -----------------------

A = 1
B = 1// 1 
let ans = solve(A, B - 1)
console.log(ans)
function solve(A, B) {
  return find(A, B);

  function find(A, B) {
    if (B == 0) {
      return 0;
    }
    // takes back to parent of the element
    let val = find(A - 1, parseInt(B / (2)));// previous row , first half

    if (B % (2) == 0) {//even
      return val;// see  see TA- Tanuj vats-27th feb 2024
    }
    return 1 - val;//odd
  }
}


 ==========================================================================================
 for large constraints : 
 -----------------------
A = 4
B = 4
let ans = solve(A, B)
console.log(ans)


function solve(A, B) {
  return find(A, B);

  function find(n, k) {
    if (k == 0) {
      return 0;
    }
    let val = find(n - 1, Math.floor(k / BigInt(2)));

    if (k % BigInt(2) == 0) {//even
      return val;
    }
    return 1 - val;//odd
  }
}
    =======================================================================================