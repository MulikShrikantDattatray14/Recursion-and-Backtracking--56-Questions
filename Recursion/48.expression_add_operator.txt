Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.

======================================================================================================================================================================================

// return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.
let num ="123";
let target=6;

const result = [];
//backtrack(index, expression, current, prev)
backtrack(0, "", 0, 0);
console.log(result)

//https://www.youtube.com/watch?v=WcgjFrZceU8
function backtrack(index, expression, current, prev) {
    if (index === num.length) {
      if (current === target) {
        result.push(expression);
      }
      return;
    }

    for (let i = index; i < num.length; i++) {
      if (i !== index && num[index] === "0") break; // Avoid leading zeros

      const operandStr = num.slice(index, i + 1);
      const operand = parseInt(operandStr);

      if (index === 0) {// first num , pick it without adding any operator.
        backtrack(i + 1, operandStr, operand, operand);
      } else {
        backtrack(
          i + 1,
          expression + "*" + operandStr,
         (( current - prev) + (prev * operand)),
         ( prev * operand)
        );
        backtrack(
          i + 1,
          expression + "+" + operandStr,
          current + operand,
          operand
        );
        backtrack(
          i + 1,
          expression + "-" + operandStr,
          current - operand,
          -operand
        );
      }
    }
}
  // Test cases
 // console.log(addOperators("123", 6)); // Output: ["1*2*3", "1+2+3"]
  // console.log(addOperators("232", 8)); // Output: ["2*3+2", "2+3*2"]
  // console.log(addOperators("3456237490", 9191)); // Output: []
  
  //
================================================================================================================================================================================================================================

  //Srinjoy Ray - 29th feb - well explained- see TA -backtracking.(external question )
// 123
// "123"   6
//  0, "", 0, -1
 
// index, expr, val, prev
// 1, "1", 1, 1

// 2, "1+2", 3, 2
// 2, "1-2", -1, -2
// 2, "1*2", 2, 2


// 2, "1+2", 3, 2
// 3, "1+2+3", 6, 3 -> TRUE
// 3, "1+2-3", 0, -3
// 3, "1+2*3", 7, 6

// 2, "1-2", -1, -2
// 3, "1-2+3", 2, 3
// 3, "1-2-3", -4, -3
// 3, "1-2*3", -5, -6


// 2, "1*2", 2, 2
// 3, "1*2+3", 5, 3
// 3, "1*2-3", -1, -3
// 3, "1*2*3", 6, 6 -> TRUE
===============================================================================================================================================================================================================================


===============================================================================