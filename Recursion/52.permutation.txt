
//https://leetcode.com/problems/permutations/description/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.


=======================================================================
striver best expained : -
-----------------------

function recurpermute(index, nums, ans) {
  //https://www.youtube.com/watch?v=f2ic2Rsc9pU&t=533s
  if (index === nums.length) { // as soon as the last index swaps with itself and there is no one else to swap with , we have reached the end and finally push that into the  final output array.
    ans.push([...nums]);
    return;
  }
  for (let i = index; i < nums.length; i++) {
    // swap for given index form that index , till the nums.length
    [nums[index], nums[i]] = [nums[i], nums[index]];
    recurpermute(index + 1, nums, ans);
    [nums[index], nums[i]] = [nums[i], nums[index]];// swap back again to original // basically backtracking
  }
}

function permute(nums) {
  const ans = [];
  recurpermute(0, nums, ans);
  return ans;
}

// Example usage:
const inputArray = [1, 2, 3];
const result = permute(inputArray);
console.log(result);

