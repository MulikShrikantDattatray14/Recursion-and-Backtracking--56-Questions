Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

1.Only numbers 1 through 9 are used.
2.Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 
 ====================================================================================================================================================================================

//Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

//1.Only numbers 1 through 9 are used.
//2.Each number is used at most once.
//Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

//https://www.youtube.com/watch?v=77KQifr--ek

//================================================================================================================================================================================================================================

function helper(ind, sum, n, ans, ans2, k) {
    if (sum == n && k == 0) {
        ans.push([...ans2]); // Push a copy of ans2
        return;
    }
    if (sum > n || k < 0) {
        return;
    }
    //1.Only numbers 1 through 9 are used.
    //2.Each number is used at most once.
    for (let i = ind; i <= 9; i++) {
        ans2.push(i);
        helper(i + 1, sum + i, n, ans, ans2, k - 1);
        ans2.pop();
    }
}

function combinationSum3(k, n) {
    let ans = [];
    let ans2 = [];
    // startingfrom 1 bcz , Only numbers 1 through 9 are used.
    helper(1, 0, n, ans, ans2, k);
    return ans;
}

let k = 3,
    n = 7;
let finalans = combinationSum3(k, n);
console.log(finalans);


======================================================================================================================================================================================