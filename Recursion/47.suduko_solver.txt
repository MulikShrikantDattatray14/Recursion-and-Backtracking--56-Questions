Problem Statement:-

Given a 9×9 incomplete sudoku, solve it such that it becomes valid sudoku. Valid sudoku has the following properties.

         1. All the rows should be filled with numbers(1 – 9) exactly once.

         2. All the columns should be filled with numbers(1 – 9) exactly once.

         3. Each 3×3 submatrix should be filled with numbers(1 – 9) exactly once.

Note: Character ‘.’ indicates empty cell.
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

1. Using recursion - 

Time Complexity: O(9(n ^ 2)), in the worst case, for each cell in the n2 board, we have 9 possible numbers.

Space Complexity: O(1), since we are refilling the given board itself, there is no extra space required, so constant space complexity.

======================================================================================================================================================================================


let board =

    [
        ['9', '5', '7', '.', '1', '3', '.', '8', '4'],
        ['4', '8', '3', '.', '5', '7', '1', '.', '6'],
        ['.', '1', '2', '.', '4', '9', '5', '3', '7'],
        ['1', '7', '.', '3', '.', '4', '9', '.', '2'],
        ['5', '.', '4', '9', '7', '.', '3', '6', '.'],
        ['3', '.', '9', '5', '.', '8', '7', '.', '1'],
        ['8', '4', '5', '7', '9', '.', '6', '1', '3'],
        ['.', '9', '1', '.', '3', '6', '.', '7', '5'],
        ['7', '.', '6', '1', '8', '5', '4', '.', '9']
    ]
solveSudoku(board);

function solveSudoku(board) {
    for (let i = 0; i < board.length; i++) {
        for (let j = 0; j < board[0].length; j++) {
            if (board[i][j] === ".") {
                for (let c = 1; c <= 9; c++) {
                    if (isValid(board, i, j, c)) {
                        board[i][j] = c.toString();

                        if (solveSudoku(board)) return true;
                        else board[i][j] = "."; // backtrack
                    }
                }
                return false;
            }
        }
    }
    return true;
}
function isValid(board, row, col, c) {
    for (let i = 0; i < 9; i++) {
        if (board[i][col] === c.toString()) return false;
        if (board[row][i] === c.toString()) return false;

        const subgridRow = Math.floor(row / 3) * 3 + Math.floor(i / 3);
        const subgridCol = Math.floor(col / 3) * 3 + (i % 3);

        if (board[subgridRow][subgridCol] === c.toString()) return false;
    }
    return true;
}
let ans = []
for (let i = 0; i < 9; i++) {
    let temp = []
    for (let j = 0; j < 9; j++) {
        temp.push((board[i][j] + ""))
    }
    ans.push(temp)
}
console.log(ans)

======================================================================================================================================================================================