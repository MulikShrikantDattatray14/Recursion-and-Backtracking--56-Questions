problem description: 

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
//https://www.youtube.com/watch?v=irkG33phXuw&t=707s
2-abc;
3-def;
4-ghi;
5-jkl;
6-mno;
7-pqrs;
8-tuv
9-wxyz;

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

======================================================================================================================================================================================


//https://www.youtube.com/watch?v=irkG33phXuw&t=707s


function printKeypad(num, output, options, finalans) {
    if (num === 0) {
        finalans.push(output);
        return;
    }

    const n1 = num % 10; // last digit
    const s1 = options[n1];
    for (let i = 0; i < s1.length; i++) {
        printKeypad(Math.floor(num / 10), s1[i] + output, options, finalans);
    }
}
function printKeypadWrapper(num) {
    const output = "";
    let finalans = [];
    // start from button-2
    const options = [
        "",
        "",
        "abc",
        "def",
        "ghi",
        "jkl",
        "mno",
        "pqrs",
        "tuv",
        "wxyz",
    ];
    printKeypad(num, output, options, finalans);
    console.log(finalans);
}
// Example usage:
printKeypadWrapper(23);


======================================================================================================================================================================================