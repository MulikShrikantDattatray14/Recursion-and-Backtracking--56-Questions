Given an m x n grid of characters board and a string word, return true if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

//https://www.youtube.com/watch?v=TKk1NBMY8As

Examples:

Example 1:

Input: 
[
["A", "B", "C", "E"], 
["S", "F", "C", "S"],
["A", "D", "E", "E"]
] 
word = "ABCCED"
Output: true
Explanation: We can easily find the given word in the matrix.

Example 2:
Input:
[
["A", "B", "C", "E"],
["S", "F", "C", "S"],
["A", "D", "E", "E"]
]
word = "ABCB"
Output: false
Explanation:  There is no such word in the given matrix.

======================================================================================================================================================================================


let board = [
    ["A", "B", "C", "E"],
    ["S", "F", "C", "S"],
    ["A", "D", "E", "E"],
];
let word = "ABCCED";
let finalans = exist(board, word);
console.log(finalans);

//https://www.youtube.com/watch?v=TKk1NBMY8As

function exist(board, word) {
    let m = board[0].length;
    let n = board.length;
    let index = 0; //index of the given word
    let ans = false;
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < m; j++) {
            if (word[index] == board[i][j]) {
                if (search(index, i, j, board, word)) {
                    return true;
                }
            }
        }
    }
    return ans;
}

function search(index, i, j, board, word) {
    if (index == word.length) return true;
    if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
    let ans = false;
    if (word[index] == board[i][j]) {
        board[i][j] = "*"; // visited
        ans =
            (search(index + 1, i + 1, j, board, word) ||
                search(index + 1, i, j + 1, board, word) ||
                search(index + 1, i - 1, j, board, word) ||
                search(index + 1, i, j - 1, board, word));

        board[i][j] = word[index]; // backtracking
    }
    return ans;
}

======================================================================================================================================================================================