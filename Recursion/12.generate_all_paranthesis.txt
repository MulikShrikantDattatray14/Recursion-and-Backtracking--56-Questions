Problem Description:

Given an integer A pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*A.

Problem Constraints:
1 <= A <= 10

Input Format:
First and only argument is integer A.

Output Format:
Return a sorted list of all possible parenthesis.

Example Input:
Input 1:
A = 3

Input 2:
A = 1

Example Output:
Output 1:
[ "((()))", "(()())", "(())()", "()(())", "()()()" ]
Output 2:
[ "()" ]


Example Explanation:
Explanation 1:
 All paranthesis are given in the output list.
Explanation 2:
 All paranthesis are given in the output list.
 
=================================================================================================================================================================================================================================================================================


//write a function to generate all combinations of well-formed parentheses of length 2*A.

let A = 3;
// refer : https://www.youtube.com/watch?v=1EjU5m0H5uI
let answer = genp(A);
console.log(answer);

function genp(A) {
  let opencount = 0;
  let closecount = 0;
  let final = [];
  helper(final, A, opencount, closecount, "");
  return final;
}

function helper(v, n, oc, cc, s) {
  if (oc == n && cc == n) {
    v.push(s);
    return;
  }
  if (oc < n) {
    helper(v, n, oc + 1, cc, s + "(");
  }
  if (cc < oc) {
    helper(v, n, oc, cc + 1, s + ")");
  }
}

======================================================================================================================================================================================