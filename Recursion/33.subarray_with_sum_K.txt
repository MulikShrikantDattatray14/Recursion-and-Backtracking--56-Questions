Problem statement : 

You are given an array 'A' of size 'N' and an integer'K'’. You need to generate and return all subarrays of array ‘A’ whose sum = ‘K’.
Note: In the output, you will see the 2D array lexicographically sorted.
Example:
Input: ‘N’ = 6 ‘K’ = 3
‘A’ = [1, 2, 3, 1, 1, 1]
Output: 3
Explanation: Subarrays whose sum = ‘3’ are:
[1, 2], [3], and [1, 1, 1]
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
6 3
1 2 3 1 1 1
Sample Output 1:
3
Explanation Of Sample Input 1:
Input: ‘N’ = 6 ‘K’ = 3
‘A’ = [1, 2, 3, 1, 1, 1]
Output: 3
Explanation: Subarrays whose sum = ‘3’ are:
[1, 2], [3], and [1, 1, 1]
Sample Input 2:
4 2
1 2 1 3
Sample Output 2:
1
Sample Input 3:
5 16
9 5 6 5 5 
Sample Output 3:
2
==================================================================================================================================================================
function findAllSubarraysWithGivenSum(arr, k) {
    const n = arr.length;
    const mpp = new Map();
    let preSum = 0;
    let cnt = 0;
    //mpp stores prefix sum and frequency
    mpp.set(0, 1);
    for (let i = 0; i < n; i++) {
        preSum += arr[i];
        // Check if the Map contains preSum - k

        if (mpp.has(preSum - k)) {
            cnt += mpp.get(preSum - k);
        }
        // Update the count of the current preSum in the Map
        if (mpp.has(preSum)) {
            mpp.set(preSum, mpp.get(preSum) + 1);
        } else {
            mpp.set(preSum, 1);
        }
    }

    console.log(mpp);
    return cnt;
}
const arr = [1, 2, 3, 1, 1, 1];
let k = 3;

const cnt = findAllSubarraysWithGivenSum(arr, k);
console.log(cnt);
  

==================================================================================================================================================================