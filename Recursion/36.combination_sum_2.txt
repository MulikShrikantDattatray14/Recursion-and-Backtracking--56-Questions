Problem Statement:-

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Examples:

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8

Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]]


Explanation: These are the unique combinations whose sum is equal to target.
 
Example 2:

Input: candidates = [2,5,2,1,2], target = 5

Output: [[1,2,2],[5]]

Explanation: These are the unique combinations whose sum is equal to target.

================================================================================================================================================================================================================================
brute force: - same as the previous question - combination sum (but TLE)



const arr = [2, 5, 2, 1, 2]
const target = 5;
let hashSet = new Set();
let ans = combinationSum(arr, target);
console.log(ans)

function findCombinations(ind, arr, target, ans, ds) {
    if (ind === arr.length) {
        if (target === 0) {
            hashSet.add(JSON.stringify(Array.from(ds)));
        }
        return;
    }

    if (arr[ind] <= target) {
        ds.push(arr[ind]);
        findCombinations(ind + 1, arr, target - arr[ind], ans, ds); // pickded
        ds.pop(); // while returning
    }
    findCombinations(ind + 1, arr, target, ans, ds); // not picked
}

function combinationSum(candidates, target) {
    candidates.sort((a, b) => a - b)
    const ans = [];
    findCombinations(0, candidates, target, ans, []);
    let result = Array.from(hashSet).map(subArray => [...subArray]);
    for (let i = 0; i < result.length; i++) {
        // Join the array elements into a string
        let jsonString = result[i].join('');
        // Parse the JSON-formatted string
        let parsedArray = JSON.parse(jsonString);
        result[i] = parsedArray
    }
    return (result)
}


===============================================================================================================

optimised code :-

//logic :- rather than trying for pick and not pick , we are trying for picking a subsequences .

const v = [10, 1, 2, 7, 6, 1, 5];
let ans = combinationSum2(v, 8);
console.log(ans);

function combinationSum2(candidates, target) {
    const ans = [];
    candidates.sort((a, b) => a - b);
    findCombinations(0, candidates, target, ans, []);
    return (ans);
}

function findCombinations(ind, arr, target, ans, ds) {
    if (target === 0) {
        ans.push([...ds]);
        return;
    }
    for (let i = ind; i < arr.length; i++) {// all possible indexes are possible
        // i>ind--> after skipping duplicates , also take care of i
        if (i > ind && arr[i] === arr[i - 1]) continue;
        if (arr[i] > target) break;
        // here we dont have option to not pick
        ds.push(arr[i]);
        findCombinations(i + 1, arr, target - arr[i], ans, ds);
        ds.pop();
    }
}


==============================================================================================================