//https://leetcode.com/problems/combinations/description/

Problem Description:

Given two integers A and B, return all possible combinations of B numbers out of 1 2 3 ... A.

Make sure the combinations are sorted.

To elaborate,

Within every entry, elements should be sorted. [1, 4] is a valid entry while [4, 1] is not.
Entries should be sorted within themselves.
WARNING: DO NOT USE LIBRARY FUNCTION FOR GENERATING COMBINATIONS.



Problem Constraints:
1 <= A, B <= 10



Input Format:

The first argument is an integer A.
The second argument is an integer B.



Output Format:
Return a 2-D vector denoting all possible combinations.



Example Input:

Input 1:
 A = 4
 B = 2
Input 2:
 A = 3
 B = 2


Example Output:
Output 1:
 [
  [1, 2],
  [1, 3],
  [1, 4],
  [2, 3],
  [2, 4],
  [3, 4],
 ]
Output 2:
 [
  [1, 2],
  [1, 3],
  [2, 3]
 ] 

Example Explanation:
Explanation 1:
All the possible combinations of size 2 in sorted order.
================================================================================================================================================================================================================================

function combine(n, k) {
  const ans = [];
  const sub = [];
  //return all possible combinations of B numbers out of 1 2 3 ... A., so start is 1 and end is A or n
  helper(1, n, k, sub, ans);
  return ans;
}
//https://www.youtube.com/watch?v=DcUkm8CPeaY
function helper(start, n, k, sub, ans) {
  if (k === 0) {
    ans.push([...sub]);
    return;
  }
  for (let i = start; i <= n - k + 1; i++) {
    sub.push(i);
    helper(i + 1, n, k - 1, sub, ans);
    sub.pop();// backtracking, as we are using the same array and not creating a new one everytime .
    //sub.pop(); - This line removes the last element added (start) from the combination (sub). This is the backtrack step, ensuring that the state of sub is reverted to what it was before the inclusion.
  }
}

// Example usage:
const result = combine(4, 2);
console.log(result);



